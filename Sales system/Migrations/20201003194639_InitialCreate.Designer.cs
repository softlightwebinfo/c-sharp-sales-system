// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sales_system.Models;

namespace Sales_system.Migrations
{
    [DbContext(typeof(salesSystemContext))]
    [Migration("20201003194639_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("Sales_system.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_name");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("Sales_system.Models.Concept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)")
                        .HasColumnName("amount")
                        .HasDefaultValueSql("0.0");

                    b.Property<int>("FkProductId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_product_id");

                    b.Property<long>("FkSaleId")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_sale_id");

                    b.Property<decimal>("PriceUnit")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)")
                        .HasColumnName("price_unit");

                    b.Property<decimal>("Total")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("FkProductId");

                    b.HasIndex("FkSaleId");

                    b.ToTable("concepts");
                });

            modelBuilder.Entity("Sales_system.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasPrecision(16)
                        .HasColumnType("numeric(16)")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_name");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Sales_system.Models.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("FkClientId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_client_id");

                    b.Property<decimal>("Total")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("FkClientId");

                    b.HasIndex(new[] { "Id" }, "table_name_id_index");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("Sales_system.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("first_name");

                    b.Property<string>("Surnames")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("surnames");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(49)
                        .HasColumnType("character varying(49)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "users_username_uindex")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Sales_system.Models.Concept", b =>
                {
                    b.HasOne("Sales_system.Models.Product", "FkProduct")
                        .WithMany("Concepts")
                        .HasForeignKey("FkProductId")
                        .HasConstraintName("concepts_products_id_fk")
                        .IsRequired();

                    b.HasOne("Sales_system.Models.Sale", "FkSale")
                        .WithMany("Concepts")
                        .HasForeignKey("FkSaleId")
                        .HasConstraintName("concepts_sales_id_fk")
                        .IsRequired();

                    b.Navigation("FkProduct");

                    b.Navigation("FkSale");
                });

            modelBuilder.Entity("Sales_system.Models.Sale", b =>
                {
                    b.HasOne("Sales_system.Models.Client", "FkClient")
                        .WithMany("Sales")
                        .HasForeignKey("FkClientId")
                        .HasConstraintName("sales_clients_id_fk")
                        .IsRequired();

                    b.Navigation("FkClient");
                });

            modelBuilder.Entity("Sales_system.Models.Client", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Sales_system.Models.Product", b =>
                {
                    b.Navigation("Concepts");
                });

            modelBuilder.Entity("Sales_system.Models.Sale", b =>
                {
                    b.Navigation("Concepts");
                });
#pragma warning restore 612, 618
        }
    }
}
